grammar marsRover.MrDsl with org.eclipse.xtext.common.Terminals

generate mrDsl "http://www.MrDsl.marsRover"

Missions:
	'Missions' name=ID
	missions += Mission+
;
	
Mission:
	'Mission' name=ID
	action_sequence += Actions+
;

Actions: movement_sequence = MovementSeq (conditionseq = ConditionSeq)?
;

ConditionSeq: 'until' (conditions += Condition ('and' conditions += Condition)*);

MovementSeq: moves += (MoveKind | Measurement | AlignBorder) (',' moves += (MoveKind | Measurement | AlignBorder))*;

//Align: AlignPond | AlignBorder;
//AlignPond: ap = 'Align' 'with' 'pond';

AlignBorder: ab = 'Align' 'with' 'border';


Measurement: DistanceMeasurement | ColorMeasurement | PushMeasurement | ProbeMeasurement 
;

DistanceMeasurement: DistanceFront | DistanceBack | DistanceOverBorder | DistanceOverPond;
DistanceFront: front = 'Measure' 'distance' 'in' 'front';
DistanceBack: back = 'Measure' 'distance' 'at' 'the' 'back';
DistanceOverBorder: border = 'Measure''distance' 'over' 'border';
DistanceOverPond: pond =  'Measure' 'distance' 'over' 'pond';

ColorMeasurement: ColorLeft | ColorRight | ColorCenter;
ColorLeft: left = 'Measure' 'color' 'on' 'the' 'left';
ColorRight: right = 'Measure' 'color' 'on' 'the' 'right';
ColorCenter: center = 'Measure' 'color' 'in' 'the' 'center';

PushMeasurement: PushLeft | PushRight | PushBack;
PushLeft: left = 'Measure' 'push' 'on' 'the' 'left';
PushRight: right = 'Measure' 'push' 'on' 'the' 'right';
PushBack: back = 'Measure' 'push' 'at' 'the' 'back';

ProbeMeasurement: probe = 'Probe';

MoveKind:
	'Move' dir = Direction | /*'Turn' turnDir = Turndir |*/ 'Rotate' rotateDir = RotateDir
;

//enum Turndir: LEFT = 'left' | RIGHT = 'right';

Direction: ForwardMove | SafeForwardMove | BackwardMove | SafeBackwardMove | RandomMove | WaitMove;

RotateDir: LeftMove | SafeLeftMove | RightMove | SafeRightMove;

FLOAT: INT '.' INT;

ForwardMove: 'forward' 'for' distance = FLOAT 'rotations';
SafeForwardMove: 'forward' 'for' distance = FLOAT 'rotations' 'safely';
BackwardMove: 'backward' 'for' distance = FLOAT 'rotations';
SafeBackwardMove: 'backward' 'for' distance = FLOAT 'rotations' 'safely';
LeftMove: 'left' 'for' degrees = INT 'degrees' ;
SafeLeftMove: 'left' 'for' degrees = INT 'degrees' 'safely' ;
RightMove: 'right' 'for' degrees = INT 'degrees';
SafeRightMove: 'right' 'for' degrees = INT 'degrees' 'safely';
WaitMove: wait = 'wait' seconds = INT 'seconds';
RandomMove : randomly = 'randomly';

Condition: (not = 'not')? cond = (ColorCondition | DistanceCondition | TouchCondition | PondCondition | ButtonPressCondition | TimeCondition);

ColorCondition: colors += Color 'color' 'is' 'found' ('and' colors += Color 'color' 'is' 'also' 'found')*;
enum Color: RED = 'red' | YELLOW = 'yellow' | BLUE = 'blue' | BLACK = 'black' | WHITE = 'white';

PondCondition : pond = Pond 'pond' 'is' 'found';
enum Pond: RED = 'red'| BLUE = 'blue' | YELLOW = 'yellow';

ButtonPressCondition: bpc = "button" "is" "pressed";

TimeCondition: 'for' seconds = INT 'seconds';

DistanceCondition: DistanceConditionFrontLT | DistanceConditionFrontGT | DistanceConditionBackLT | DistanceConditionBackGT;
DistanceConditionFrontLT: 'distance' 'in' 'front' 'less' 'than' distance = INT;
DistanceConditionFrontGT: 'distance' 'in' 'front' 'greater' 'than' distance = INT;
DistanceConditionBackLT: 'distance' 'in' 'back' 'less' 'than' distance = INT;
DistanceConditionBackGT: 'distance' 'in' 'back' 'greater' 'than' distance = INT;

TouchCondition: TouchLeftCondition | TouchRightCondition | TouchLeftRightCondition | TouchBackCondition;
TouchLeftCondition: 'the' 'left' isPressed = Pressed 'pressed';
TouchRightCondition: 'the' 'right' isPressed = Pressed 'pressed';
TouchLeftRightCondition: 'both' 'the' 'left' 'and' 'right' isPressed = Pressed 'pressed';
TouchBackCondition: 'the' 'back' isPressed = Pressed 'pressed';

enum Pressed: TRUE = 'buffer is ' | FALSE = 'buffer is not';

