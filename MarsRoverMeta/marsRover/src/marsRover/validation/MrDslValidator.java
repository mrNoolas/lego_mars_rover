/*
 * generated by Xtext 2.23.0
 */
package marsRover.validation;

import org.eclipse.xtext.validation.Check;

import marsRover.mrDsl.BackwardMove;
import marsRover.mrDsl.DistanceConditionBackGT;
import marsRover.mrDsl.DistanceConditionBackLT;
import marsRover.mrDsl.DistanceConditionFrontGT;
import marsRover.mrDsl.DistanceConditionFrontLT;
import marsRover.mrDsl.ForwardMove;
import marsRover.mrDsl.LeftMove;
import marsRover.mrDsl.RightMove;
import marsRover.mrDsl.TimeCondition;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MrDslValidator extends AbstractMrDslValidator {
	
	@Check
	void checkDegreesLeft(LeftMove move) {
		int degrees = move.getDegrees();
		if(degrees <= 0 | degrees > 360) 
			error("Degrees must be between 1 and 360", null);
	}
	
	@Check
	void checkDegreesRight(RightMove move) {
		int degrees = move.getDegrees();
		if(degrees <= 0 | degrees > 360)
			error("Degrees must be between 1 and 360", null);
	}
	
	@Check
	void checkRotationsForward(ForwardMove move) {
		int rotations = move.getDistance();
		if(rotations <= 0) 
			error("Rotations must be more than 0", null);
	}
	

	@Check
	void checkRotationsBackward(BackwardMove move) {
		int rotations = move.getDistance();
		if(rotations <= 0) 
			error("Rotations must be more than 0", null);
	}
		
	@Check
	void checkDistanceFrontLT(DistanceConditionFrontLT condition) {
		int distance = condition.getDistance();
		if(distance <= 0) 
			error("Distance must be positive", null);
	}

	@Check
	void checkDistanceFrontGT(DistanceConditionFrontGT condition) {
		int distance = condition.getDistance();
		if(distance <= 0) 
			error("Distance must be positive", null);
	}
	
	@Check
	void checkDistanceBackLT(DistanceConditionBackLT condition) {
		int distance = condition.getDistance();
		if(distance <= 0) 
			error("Distance must be positive", null);
	}
	
	@Check
	void checkDistanceBackGT(DistanceConditionBackGT condition) {
		int distance = condition.getDistance();
		if(distance <= 0) 
			error("Distance must be positive", null);
	}
	
	@Check
	void checkTimeCondition(TimeCondition condition) {
		int seconds = condition.getSeconds();
		if(seconds <= 0)
			error("Seconds must be positive", null);
	}
}
